import os
import numpy as np
import cv2
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Dropout, Conv2DTranspose, concatenate, Cropping2D
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import precision_score, recall_score



# Function to load and preprocess images from a directory
def load_and_preprocess_images_from_folder(folder, target_shape=(256, 256)):
    images = []
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder, filename))
        if img is not None:
            img = cv2.resize(img, target_shape)
            images.append(img)
    return np.array(images)

# Load images and labels from respective folders
images_folder = '/kaggle/input/astroid-hunter-dataset/ast/Original Images'
labels_folder = '/kaggle/input/astroid-hunter-dataset/ast/Binary Data'

# Create an instance of ImageDataGenerator for data augmentation
datagen = ImageDataGenerator(
    rotation_range=20,      # Random rotation in the range [-20, 20] degrees
    width_shift_range=0.1,   # Random horizontal shift by 10%
    height_shift_range=0.1,  # Random vertical shift by 10%
    shear_range=0.2,         # Shear intensity
    zoom_range=0.2,          # Random zoom by 20%
    horizontal_flip=True,    # Random horizontal flip
    vertical_flip=True       # Random vertical flip
)


X = load_and_preprocess_images_from_folder(images_folder)
y = load_and_preprocess_images_from_folder(labels_folder)

# Convert multi-class labels to a single binary channel (foreground vs. background)
y_binary = np.any(y, axis=-1).astype(np.float32)


# Preprocessing
# Normalize images to [0, 1]
X = X.astype('float32') / 255.0
y_binary = y_binary.astype('float32')

# Split dataset into train and validation sets
X_train, X_val, y_train, y_val = train_test_split(X, y_binary, test_size=0.2, random_state=42)

import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, Conv1D, MaxPooling2D, Dropout, Conv2DTranspose, concatenate, Reshape, Add, GlobalAveragePooling2D, Attention

def custom_unet_with_fpn_dilated_attention(input_size=(256, 256, 3)):
    inputs = Input(input_size)

    # Contracting Path
    conv1 = Conv2D(64, 3, activation='relu', padding='same', kernel_initializer='he_normal')(inputs)
    conv1 = Conv2D(64, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv1)
    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)

    conv2 = Conv2D(128, 5, activation='relu', padding='same', kernel_initializer='he_normal')(pool1)
    conv2 = Conv2D(128, 5, activation='relu', padding='same', kernel_initializer='he_normal')(conv2)
    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)

    conv3 = Conv2D(256, 5, activation='relu', padding='same', kernel_initializer='he_normal')(pool2)
    conv3 = Conv2D(256, 5, activation='relu', padding='same', kernel_initializer='he_normal')(conv3)
    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)

    conv4 = Conv2D(512, 3, activation='relu', padding='same', kernel_initializer='he_normal')(pool3)
    conv4 = Conv2D(512, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv4)
    drop4 = Dropout(0.5)(conv4)
    pool4 = MaxPooling2D(pool_size=(2, 2))(drop4)

    conv5 = Conv2D(1024, 3, activation='relu', padding='same', kernel_initializer='he_normal')(pool4)
    conv5 = Conv2D(1024, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv5)
    drop5 = Dropout(0.5)(conv5)

    # Expansive Path with FPN, Dilated Convolution, and Attention
    up6 = Conv2DTranspose(512, 2, strides=(2, 2), padding='same')(drop5)
    merge6 = concatenate([drop4, up6], axis=3)
    conv6 = Conv2D(512, 3, activation='relu', padding='same', kernel_initializer='he_normal')(merge6)
    conv6 = Conv2D(512, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv6)

    lateral_conv3 = Conv2D(256, 1, activation='relu', padding='same', kernel_initializer='he_normal')(conv3)
    up7 = Add()([Conv2DTranspose(256, 2, strides=(2, 2), padding='same')(conv6), lateral_conv3])
    conv7 = Conv2D(256, 5, activation='relu', padding='same', kernel_initializer='he_normal')(up7)
    conv7 = Conv2D(256, 5, activation='relu', padding='same', kernel_initializer='he_normal')(conv7)

    lateral_conv2 = Conv2D(128, 1, activation='relu', padding='same', kernel_initializer='he_normal')(conv2)
    up8 = Add()([Conv2DTranspose(128, 2, strides=(2, 2), padding='same')(conv7), lateral_conv2])
    conv8 = Conv2D(128, 5, activation='relu', padding='same', kernel_initializer='he_normal')(up8)
    conv8 = Conv2D(128, 5, activation='relu', padding='same', kernel_initializer='he_normal')(conv8)

    lateral_conv1 = Conv2D(64, 1, activation='relu', padding='same', kernel_initializer='he_normal')(conv1)
    up9 = Add()([Conv2DTranspose(64, 2, strides=(2, 2), padding='same')(conv8), lateral_conv1])
    conv9 = Conv2D(64, 5, activation='relu', padding='same', kernel_initializer='he_normal')(up9)
    conv9 = Conv2D(64, 5, activation='relu', padding='same', kernel_initializer='he_normal')(conv9)

    # Dilated Convolution
    dilated_conv = Conv2D(64, 3, activation='relu', padding='same', dilation_rate=2, kernel_initializer='he_normal')(conv9)

    # Attention Mechanism
    attention = Attention()([conv9, dilated_conv])

    # 1D Convolution for Linear Features
    conv1d = Conv1D(32, 3, activation='relu', padding='same', kernel_initializer='he_normal')(attention)

    # Global Average Pooling
    gap = GlobalAveragePooling2D()(conv1d)

    # Reshape to a 2D shape
    gap_reshaped = Reshape((1, 1, 32))(gap)

    # Output Layer with spatial dimensions matching input images
    outputs = Conv2D(1, 1, activation='sigmoid')(gap_reshaped)

    model = Model(inputs=inputs, outputs=outputs)
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

    return model


# Create and compile the U-Net model
model = custom_unet_with_fpn_dilated_attention(input_size=(256, 256, 3))

# Number of training samples
num_train_samples = X_train.shape[0]

# Create an augmented data generator for training
train_datagen = datagen.flow(X_train, y_train, batch_size=8)

# Train the model using the augmented data generator
model.fit(train_datagen, steps_per_epoch=num_train_samples // 8, epochs=20, validation_data=(X_val, y_val))
